// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"api/auth/cognito"
	"api/core"
	"api/image/resize"
	"api/storage"
	"api/storage/postgresql"
	"github.com/google/wire"
	"github.com/rs/zerolog"
)

// Injectors from wire.go:

func InitializeApp(logger *zerolog.Logger) (*core.App, error) {
	config, err := core.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	database := postgresql.NewDatabase(logger)
	userRepo := postgresql.NewUserRepo(database)
	authService := cognito.NewCognitoAuthService(config, userRepo, logger)
	client := resize.NewClient(config, logger)
	imageRepo := postgresql.NewImageRepository(database)
	imagesService := core.NewImagesService(client, imageRepo, authService, logger)
	app := core.NewApp(config, database, authService, imagesService)
	return app, nil
}

func InitializeAppForTesting(logger *zerolog.Logger) (*core.App, error) {
	config, err := core.NewConfigFromEnv()
	if err != nil {
		return nil, err
	}
	database := postgresql.NewDatabase(logger)
	userRepo := postgresql.NewUserRepo(database)
	authService := cognito.NewCognitoAuthService(config, userRepo, logger)
	client := resize.NewClient(config, logger)
	imageRepo := postgresql.NewImageRepository(database)
	imagesService := core.NewImagesService(client, imageRepo, authService, logger)
	app := core.NewApp(config, database, authService, imagesService)
	return app, nil
}

// wire.go:

var DatabaseSet = wire.NewSet(postgresql.NewDatabase, postgresql.NewImageRepository, postgresql.NewUserRepo, wire.Bind(new(storage.Storage), new(*postgresql.Database)), wire.Bind(new(storage.ImagesRepository), new(*postgresql.ImageRepo)), wire.Bind(new(storage.UserRepository), new(*postgresql.UserRepo)))
